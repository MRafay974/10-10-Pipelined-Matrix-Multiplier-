import serial
import time

class FPGA_Serial_Communicator:
    def __init__(self, port, baudrate=9600, timeout=1):
        # Initialize the serial connection parameters
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        self.ser = None

    def open_connection(self):
        try:
            # Open the serial connection with the specified parameters
            self.ser = serial.Serial(self.port, self.baudrate, timeout=self.timeout)
            print(f"Serial port {self.port} opened successfully.")
        except serial.SerialException as e:
            print(f"Error opening serial port {self.port}: {e}")
            self.ser = None

    def close_connection(self):
        if self.ser and self.ser.is_open:
            self.ser.close()
            print(f"Serial port {self.port} closed.")

    def send_data(self, data_byte):
        """Send one 8-bit data byte to FPGA."""
        if not self.ser or not self.ser.is_open:
            print("Error: Serial connection not open.")
            return
        
        try:
            byte = int(data_byte, 2)  # Convert the 8-bit binary string to an integer (byte)
            self.ser.write(bytes([byte]))  # Send the byte
            self.ser.flush()  # Ensure the data is sent immediately
            print(f"Data sent to FPGA: {data_byte} (0x{byte:02X})")
        except serial.SerialException as e:
            print(f"Error sending data: {e}")

    def read_data(self):
        """Read data from the FPGA if available."""
        if not self.ser or not self.ser.is_open:
            print("Error: Serial connection not open.")
            return None
        
        try:
            # Check if there is any data in the input buffer
            if self.ser.in_waiting > 0:
                data = self.ser.read(self.ser.in_waiting)  # Read available data
                print(f"Data received from FPGA: {data}")
                return data
            else:
                return None
        except serial.SerialException as e:
            print(f"Error reading data: {e}")
            return None


# Example usage:
if __name__ == "__main__":
    # Setup serial connection parameters
    port = 'COM9'  # Update with your FPGA's serial port
    baudrate = 9600  # Update with your FPGA's baud rate

    # Initialize communicator
    fpga_comm = FPGA_Serial_Communicator(port, baudrate)

    # Open serial connection
    fpga_comm.open_connection()

    # Define a 2x2 matrix with 8-bit values (these are the data to be sent)
    matrix_data1 = [
        '00010001',  # 1
        '00010001',  # 2
        '00010001',  # 3
        '00010001',  # 4
        '00010001',  # 5
        '00010001',  # 6
        '00010001',  # 7
        '00010001',  # 8
        '00010001',  # 9
        '00010001',  # 10
        '00010001',  # 11
        '00010001',  # 12
        '00010001',  # 13
        '00010001',  # 14
        '00010001',  # 15
        '00010001',  # 16
        '00010001',  # 17
        '00010001',  # 18
        '00010001',  # 19
        '00010001',  # 20
        '00010001',  # 21
        '00010001',  # 22
        '00010001',  # 23
        '00010001',  # 24
        '00010001',  # 25
        '00010001',  # 26
        '00010001',  # 27
        '00010001',  # 28
        '00010001',  # 29
        '00010001',  # 30
        '00010001',  # 31
        '00010001',  # 32
        '00010001',  # 33
        '00010001',  # 34
        '00010001',  # 35
        '00010001',  # 36
        '00010001',  # 37
        '00010001',  # 38
        '00010001',  # 39
        '00010001',  # 40
        '00010001',  # 41
        '00010001',  # 42
        '00010001',  # 43
        '00010001',  # 44
        '00010001',  # 45
        '00010001',  # 46
        '00010001',  # 47
        '00010001',  # 48
        '00010001',  # 49
        '00010001',  # 50
        '00010001',  # 51
        '00010001',  # 52
        '00010001',  # 53
        '00010001',  # 54
        '00010001',  # 55
        '00010001',  # 56
        '00010001',  # 57
        '00010001',  # 58
        '00010001',  # 59
        '00010001',  # 60
        '00010001',  # 61
        '00010001',  # 62
        '00010001',  # 63
        '00010001',  # 64
        '00010001',  # 65
        '00010001',  # 66
        '00010001',  # 67
        '00010001',  # 68
        '00010001',  # 69
        '00010001',  # 70
        '00010001',  # 71
        '00010001',  # 72
        '00010001',  # 73
        '00010001',  # 74
        '00010001',  # 75
        '00010001',  # 76
        '00010001',  # 77
        '00010001',  # 78
        '00010001',  # 79
        '00010001',  # 80
        '00010001',  # 81
        '00010001',  # 82
        '00010001',  # 83
        '00010001',  # 84
        '00010001',  # 85
        '00010001',  # 86
        '00010001',  # 87
        '00010001',  # 88
        '00010001',  # 89
        '00010001',  # 90
        '00010001',  # 91
        '00010001',  # 92
        '00010001',  # 93
        '00010001',  # 94
        '00010001',  # 95
        '00010001',  # 96
        '00010001',  # 97
        '00010001',  # 98
        '00010001',  # 99
        '00010001',  # 100
     
    ]
    
   
    
    # 1. Send all data in the first loop
    print("Starting data transmission to FPGA...")

    # Iterate over each element in the matrix_data1 list
    for byte in matrix_data1:
        fpga_comm.send_data(byte)  # Send only the binary data part
        print(f"Sent byte: {byte}")  # Print the sent data
        time.sleep(0.1)  # Optional: Adjust delay based on FPGA's processing time

    # 2. After sending all data, enter the reception loop
    print("Starting data reception from FPGA...")
    
    bytes_received = 1  # Counter to track the number of bytes received

    while bytes_received:  # We only want to receive data
        # Read data from the FPGA
        received_data = fpga_comm.read_data()
        
        # If data is received, process it
        if received_data:
            # Convert each byte in the received data to binary
            binary_data = [(
                format(byte >> 4, '04b'),  # Upper half-byte (4 bits)
                format(byte & 0x0F, '04b')  # Lower half-byte (4 bits)
            ) for byte in received_data]
            
            # Print the binary data
            print(f"Binary data: {binary_data}")
        
        # Optional delay between reads
        time.sleep(0.1)  # Adjust delay based on FPGA's response time

    # Close the serial connection after receiving data
    fpga_comm.close_connection()
